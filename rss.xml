<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">

<channel>
<title>Daniel's Blog</title>
<link>https://blog.danieliu.xyz</link>
<description>random stuff that daniel wants to post</description>

    <!-- BLOG START -->
<!-- ID:Configure Zathura with Xresources START -->
<item>
<title>Configure Zathura with Xresources</title>
<link>https://blog.danieliu.xyz/blog/html/Configure Zathura with Xresources.html</link>
<description>
<![CDATA[

<p>
The .Xresources file is great. It is a centralized place for you to define color themes and fonts among other things to be read by a variety of applications. This allows for a consistent theme, and less hassle when changing settings. Everyone knows that repetitive code is bad code.
</p>

<p>
However, for whatever reason, zathura, my pdf viewer of choice, does not want to read from this file.
The effect I wanted to achieve was to make zathura have the same background color as my terminal, like so:
</p>

<img src="https://files.danieliu.xyz/blog/xresource-zathura/zathura_xresource.png"/>

<p>
Obviously we aren't going to give up over such a small obstacle. 
It's a slight hassle, but we could simply have a shell script read from Xresource and write into the zathura config file.
The only downside is that the script needs to be run everytime you want to modify the config.
</p>

<p>
First, locate your zathura config file. By default, it should be located at <code class="inline-code">$HOME/.config/zathura/zathurarc</code>. So this is the file we want to write our new config to.
</p>

<p>
Now to read from Xresource, we could just use sed or grep and find the line we want and format it so we get the value. However, if you used macros, this might not play out too well. Thankfully, X gives us a handy command to query our Xresource settings, namely <code class="inline-code">xrdb -query</code>. The output of this command looks something like this:
<pre><code>*.background:   #2E3440
*.color0:       #3B4252
*.color1:       #BF616A
*.color10:      #A3BE8C
*.color11:      #EBCB8B
*.color12:      #81A1C1
*.color13:      #B48EAD
*.color14:      #8FBCBB
*.color15:      #ECEFF4
*.color2:       #A3BE8C
*.color3:       #EBCB8B
*.color4:       #81A1C1
*.color5:       #B48EAD
*.color6:       #88C0D0
*.color7:       #E5E9F0
*.color8:       #4C566A
*.color9:       #BF616A
</code></pre>
</p>

<p>
So now all we need to do is grep for the option we want, and use awk to grab the second column.
</p>

<p>
I made a function to query X like so:
<pre><code>get_option() {
    xrdb -query | grep $1 | awk '{print $2}'
}
</code></pre>
</p>

<p>
And now we are ready to write to our config file. Since our config will most likely be multiline, we can use <a href="https://en.wikipedia.org/wiki/Here_document#Unix_shells">heredocs</a>:
<pre><code>cat &gt; "$HOME/.config/zathura/zathurarc" &lt;&lt;- CONF
    set recolor
    set recolor-darkcolor "$(get_option foreground)"
    set recolor-lightcolor "$(get_option *.color0:)"
    set default-bg "$(get_option *.color0:)"
    map i recolor
CONF
</code></pre>
</p>

<p>
Note that using <code class="inline-code">&lt;&lt;-</code> ignores leading tabs while <code class="inline-code">&lt;&lt;</code> does not, just for aesthetic. Notice how we used command substitution to call the function we wrote earlier.
</p>

<p>
Finally, chmod your shell script and run it every time you want to make a change to your config. Since we are overwriting the zathura config, you want to define your options inside the body of the heredoc instead. 
The example config I gave provides the background color behavior I described earlier. Specifically, we actually redefine the colors zathura's 'invert color' mode uses. This way, we can toggle between the original pdf color and our colors with the 'i' key.
</p>

<p>
And that's it! We are done, shell script to the rescue.
</p>

]]>
</description>
</item>
<!-- ID:Configure Zathura with Xresources END -->
<!-- ID:ブログへようこそ START -->
<item>
<title>ブログへようこそ</title>
<link>https://blog.danieliu.xyz/blog/html/ブログへようこそ.html</link>
<description>
<![CDATA[

<p>
僕のブログへようこそ！このサイトでいろいろソフトに関することを掲載するつもりです．
フワイ，<a href="https://github.com/MrPicklePinosaur/pb">このシェルスクリプト</a>で作ります，ブログは．
</p>

<p>
実は，日本語初心者ですから多分文法がちょっと変でしょう．
ブログ書くのは日本語練習って思います．とにかく，頑張ってます．
</p>

<p>
あーほら，ギフです．どう致しまして．
</p>

<img src="https://files.danieliu.xyz/blog/welcome-jp/bonk.gif" />

</p>
]]>
</description>
</item>
<!-- ID:ブログへようこそ END -->
<!-- ID:Vim users remap caps to escape rnrn START -->
<item>
<title>Vim users remap caps to escape rnrn</title>
<link>https://blog.danieliu.xyz/blog/html/Vim users remap caps to escape rnrn.html</link>
<description>
<![CDATA[

<p>
Probably the worst nightmare of any vim user is accidentally hitting the caps key.
</p>

<p>
Caps lock is useless, for the vast majority of time, you only need to capitalize just the first letter, so pressing caps + letter + caps is too many key presses! Simply releasing the shift key is much faster and feels much better. 
</p>

<p>
However most importantly, it leaves such an ergonomic key open for... escape! One of the most commonly hit keys of vim users. Such an important key is so far from the home row, almost acting counterproductive to the speed boost vim gives you.
</p>

<h2>How to remap (Linux)</h2>
<h3>Setxkbmap</h3>
<p>
On linux, if you happen to use X (which is most people), you can get away with using setxkbmap, simply include the following in your .xinitrc, or some alternative auto run script:
<code>
setxkbmap -option caps:escape
</code>

For the most part this will work well enough. Another option would be to make a custom key map with xmodmap, if one of these has any issues give the other a try.
</p>

<h3>Xmodmap</h3>
<p>
You can make a custom key map by running:
<code>
xmodmap -pke &gt; ~/.Xmodmap
</code>
and then simply add
<code>
xmodmap "$HOME/.Xmodmap"
</code>
to your .xinitrc or equivalent.
</p>

<p>
As for the actual configuration, I added these lines to .Xmodmap:
<pre><code>remove Lock = Caps_Lock
keysym Caps_Lock = Escape
add Lock = Caps_Lock
</code></pre>
</p>

<p>
Oh, and also, if you screw something up and want to reset your keyboard, you can use:
<code>
setxkbmap -layout us
</code>
or whatever your default keyboard layout was.
</p>

<h2>How to remap (Windows)</h2>
<p>
I'm not much of a windows user, but here's a nice article from the <a href="https://vim.fandom.com/wiki/Map_caps_lock_to_escape_in_Windows#AutoHotkey">vim website</a>. I specifically recommend using autohotkey, as it gives you much more fine control on the behavior (you can do things like make caps function as escape only when running vim).
</p>

<h2>Afterthought</h2>
<p>
An alternative may be actually mapping caps to control instead, arguable a much more used key than escape in vim and especially in gui programs. Instead, you can use ctrl+[ as <a href="https://vim.fandom.com/wiki/Avoid_the_escape_key">escape instead</a> in vim. I'm still currently using escape, but I'll probably try control sometime in the near future. Regardless, the point is, uninstall caps lock already!
</p>

<h2>Additional Reading</h2>
<p>Here are some links you might want to check out:</p>
<ul>
    <li><p><a href="https://wiki.archlinux.org/index.php/xmodmap">Arch Wiki - xmodmap</p></a></li>
    <li><p><a href="https://wiki.archlinux.org/index.php/Xorg/Keyboard_configuration">Arch Wiki - X keyboard config</p></a</li>
    <li><p><a href="https://wiki.linuxquestions.org/wiki/Configuring_keyboards#The_Xmodmap.2FSetxkbmap_Method">LinuxQuestions - Configuring Keyboards</p></a></li>
</ul>
]]>
</description>
</item>
<!-- ID:Vim users remap caps to escape rnrn END -->
<!-- ID:Animelon for learning japanese START -->
<item>
<title>Animelon for learning japanese</title>
<link>https://blog.danieliu.xyz/blog/html/Animelon for learning japanese.html</link>
<description>
<![CDATA[
<p>
Found a cool anime site for learning japanese: <a href="https://animelon.com/">animelon.com</a>. It provides english subtitles as well as japanese (with options for romaji, ひらがな and カタカナ). You can also hover over subtitles to get definitions, and jump between dialogue lines. It also has some more hardcore features like saving dialogue for flashcard quizzes. I'm not hardcore so I just like to have the two subs at the same time and do some passive learning. Overall the uploads are decently high quality so it can used for general anime-watching too. Only downside is that it's selection is much smaller than your standard site, and it almost completely lacks the newer seasonal stuff, since they need time to make the necessary subs or whatever. Anyways that's it, doesn't hurt to give it a shot.
</p>
]]>
</description>

<img src="https://files.danieliu.xyz/blog/animelon/animelon.jpg"/>
</item>
<!-- ID:Animelon for learning japanese END -->
<!-- ID:Welcome To Blog START -->
<item>
<title>Welcome To Blog</title>
<link>https://blog.danieliu.xyz/blog/html/Welcome To Blog.html</link>
<description>
<![CDATA[
<p>
Welcome to my blog! This is where I will post random snippets and possibly guides to some tech related stuff.
This blog was generated with a very trash <a href="https://github.com/MrPicklePinosaur/pb">shell script</a> I wrote, for the sake of avoiding
bloated web frameworks. There's still a couple of things I would like to improve, such as how you can't have certain special characters
in the blog name, and I would probably like some sort of tag feature to filter the blog posts. Oh and, feel free to subscribe to the 
<a href="https://blog.danieliu.xyz/rss.xml">rss feed</a>, if you care enough.
</p>

<p>Here's a random code block, just for css testing purposes:</p>
<code>sudo rm -rf /</code>

<p>And here's a random gif:</p>
<img src="https://pa1.narvii.com/6611/257c27d4c392cb9381f186bc060c37771c974600_hq.gif" />

<p>That's all for now :&gt; </p>
]]>
</description>
</item>
<!-- ID:Welcome To Blog END -->
    <!-- BLOG END -->

</channel>

</rss>
